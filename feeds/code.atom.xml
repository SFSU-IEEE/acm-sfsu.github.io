<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ACM at SFSU</title><link href="http://acm-sfsu.github.io/" rel="alternate"></link><link href="http://acm-sfsu.github.io/feeds/code.atom.xml" rel="self"></link><id>http://acm-sfsu.github.io/</id><updated>2014-02-18T00:00:00-08:00</updated><entry><title>Blogging about blogs</title><link href="http://acm-sfsu.github.io/blogging-about-blogs.html" rel="alternate"></link><updated>2014-02-18T00:00:00-08:00</updated><author><name>Tom Spalding</name></author><id>tag:acm-sfsu.github.io,2014-02-18:blogging-about-blogs.html</id><summary type="html">&lt;p&gt;It is the first post with our new blog, we're upgrading our infrastructure, and have lots of upcoming events. Let me give a brief overview of what's up. &lt;/p&gt;
&lt;h1&gt;HAI&lt;/h1&gt;
&lt;p&gt;It's a new exciting semester! We had a great turnout to the general meeting (thanks &lt;a href="http://marcsosnick.com"&gt;Marc&lt;/a&gt;!) And we just had had our first Python workshop utilizing the Udacity course &lt;a href="https://www.udacity.com/course/cs101"&gt;Intro to Computer Science&lt;/a&gt; taught by Professor Dave Evans. &lt;/p&gt;
&lt;p&gt;Be sure to come out to our next workshop Intro to Android Mobile App Development on Friday 2-21. Download the IDE we’ll be using &lt;a href="http://developer.android.com/sdk/index.html"&gt;here&lt;/a&gt; and &lt;code&gt;git&lt;/code&gt; the demo &lt;a href="https://github.com/acm-sfsu/androidHelloWorld"&gt;here&lt;/a&gt;. Also, please check out Professor Puder’s &lt;a href="http://pear.sfsu.edu/csc780/tutorial"&gt;Android tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See our other upcoming events at &lt;a href="/calendar"&gt;sfsu.acm.org/calendar&lt;/a&gt;. Events include a &lt;a href="http://www.buttonsmashingnight.com"&gt;Button Smashing Night&lt;/a&gt; at &lt;a href="http://www.20mission.com"&gt;20mission&lt;/a&gt;, an Intelligence Community Virtual Career Fair, a guest speaker from Twitter, an Intro to Open Source, a Raspberry Pi &amp;amp; Arduino Meetup, and more!&lt;/p&gt;
&lt;h1&gt;Blog&lt;/h1&gt;
&lt;p&gt;Now that the shameless plugs are over with, I thought I'd post about what just happened to the site. We just &lt;a href="https://github.com/acm-sfsu/IRC-Bot"&gt;forked paullik's IRC-Bot&lt;/a&gt; to sit in our &lt;a href="http://webchat.freenode.net/?channels=acm-sfsu"&gt;#acm-sfsu&lt;/a&gt; IRC channel, and thought we'd keep up with the Python theme. So, we used the static site generator &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; which is very similar in process to &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt;. Btw, we will be doing a lightning presentation on both Jekyll and Pelican &lt;a href="/calendar"&gt;soon&lt;/a&gt;, if any of you are interested in leveraging these. Come out and learn to blog like a hacker! &lt;/p&gt;
&lt;p&gt;Aside: maybe the shameless plugs aren't quite over with ;)&lt;/p&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; is a static site generator powered by &lt;a href="http://python.org"&gt;Python&lt;/a&gt;! and is very similar in implementation as &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt;. Since we're into social coding, I'd like to use this blog post as a mini-tutorial. So, if you are indeed using this as a tutorial, &lt;code&gt;git&lt;/code&gt; Pelican &lt;a href="https://github.com/getpelican/pelican"&gt;here&lt;/a&gt; and read over &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html"&gt;getting started&lt;/a&gt; and using &lt;a href="https://gist.github.com/josefjezek/6053301"&gt;Pelican on Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our old blog was made in Wordpress. We used &lt;code&gt;pelican-import&lt;/code&gt; to get the old entries. It has two dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeautifulSoup &lt;code&gt;pip install BeautifulSoup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/pandoc"&gt;Pandoc&lt;/a&gt; &lt;code&gt;apt-get pandoc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See: &lt;a href="docs.getpelican.com/en/3.1.1/importer.html"&gt;pelican-import&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Import with &lt;code&gt;pelican-import --wpfile -o content posts.xml&lt;/code&gt; which takes your Wordpress' exported &lt;code&gt;posts.xml&lt;/code&gt; file and makes &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; (reST) posts of your content in the &lt;code&gt;content&lt;/code&gt; folder. You can use both &lt;a href="http://daringfireball.net/projects/markdown"&gt;Markdown&lt;/a&gt; and reST for writing your posts. &lt;/p&gt;
&lt;p&gt;Aside: This post is written in Markdown if you were curious.&lt;/p&gt;
&lt;p&gt;Aside: If you need BeautifulSoup4, &lt;code&gt;pip install BeautifulSoup4&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Generating the site&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;pelican&lt;/code&gt;. This will generate your site in the &lt;code&gt;output&lt;/code&gt; folder by default. It also uses your &lt;code&gt;pelicanconf.py&lt;/code&gt; file by default. See the &lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#basic-usage"&gt;basic usage&lt;/a&gt; for more info such as running &lt;code&gt;pelican -r&lt;/code&gt; to do automatic reloading when you make changes.&lt;/p&gt;
&lt;p&gt;Aside: Alternately, run &lt;code&gt;make regenerate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can view the site on your browser by opening the &lt;code&gt;index.html&lt;/code&gt; file in the &lt;code&gt;output&lt;/code&gt; folder. Also, checkout the &lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#kickstart-your-site"&gt;kickstart your blog&lt;/a&gt; section. If you installed &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;, you can also run these &lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#fabric"&gt;useful commands&lt;/a&gt; for building the site, regenerating, serving, and publishing. Also, you can use &lt;code&gt;make serve&lt;/code&gt; if you used the quick configuration to generate a &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Theming&lt;/h3&gt;
&lt;p&gt;This comes with a default theme, you might need to update the &lt;code&gt;RELATIVE_URLS&lt;/code&gt; parameter in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file to utilize your stylesheets etc during development.&lt;/p&gt;
&lt;p&gt;If you want to play with the themes, you can quickly switch between themes by cloning some sample ones with &lt;code&gt;git clone https://github.com/getpelican/pelican-themes.git themes&lt;/code&gt; and then run pelican with &lt;code&gt;pelican -t /themes/chunk&lt;/code&gt; or edit &lt;code&gt;pelicanconf.py&lt;/code&gt; where it says &lt;code&gt;THEME = "/themes/chunk"&lt;/code&gt; and just run &lt;code&gt;pelican&lt;/code&gt;. Adding a theme submodule is easy with &lt;code&gt;git submodule add https://github.com/hdra/pelican-cait.git themes/pelican-cait&lt;/code&gt;. This'll probably save you build issues in the next section.&lt;/p&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;To put this on Github Pages, you'll want to use your &lt;code&gt;output&lt;/code&gt; folder as the &lt;code&gt;gh-pages&lt;/code&gt; branch, then it can be hosted as a Github Pages page. Follow the &lt;a href="https://gist.github.com/josefjezek/6053301"&gt;how to use Pelican on Github Pages&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican/blob/master/docs/tips.rst#publishing-to-github"&gt;Publishing to Github&lt;/a&gt; tutorials.&lt;/p&gt;
&lt;p&gt;Most simply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ghp-import output&lt;/code&gt;. By typing &lt;code&gt;git branch&lt;/code&gt; you'll now see a &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside: or in one command, &lt;code&gt;make github&lt;/code&gt; which does the same thing.&lt;/p&gt;
&lt;p&gt;If you are using an Organization/User page like us, you'll do things slightly different. You'll want &lt;em&gt;all&lt;/em&gt; of your generated files in the master branch. Do this in the beginning. &lt;/p&gt;
&lt;p&gt;If you didn't do this in the beginning and want to now, keep reading. In this case, you don't have to call your branch &lt;code&gt;gh-pages&lt;/code&gt;, so we went with &lt;code&gt;source&lt;/code&gt;. However, originally I was working on all my source in the &lt;code&gt;master&lt;/code&gt; branch, but then wanted to shift this all over to a &lt;code&gt;source&lt;/code&gt; branch and then orphan my master and start it from scratch with the generated output.&lt;/p&gt;
&lt;p&gt;If you've run across this, follow these instructions (&lt;a href="https://stackoverflow.com/questions/8762601/how-do-i-rename-my-git-master-branch-to-release/8762728#8762728"&gt;src&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;     &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;         &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;              &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If trying to delete your master branch with &lt;code&gt;git branch -D master&lt;/code&gt;, you'll get an error, but you can resolve it by going into your admin settings and changing the default branch to &lt;code&gt;source&lt;/code&gt;. This is so that Github knows what to serve up when people visit the site. Now you may repeat the command and it will work.&lt;/p&gt;
&lt;p&gt;You can verify that &lt;code&gt;master&lt;/code&gt; was deleted by typing &lt;code&gt;git branch&lt;/code&gt;. Now we're going to start the master branch from scratch again with &lt;code&gt;git checkout --orphan master&lt;/code&gt;. Definitely check out the explanations in &lt;code&gt;git checkout --help&lt;/code&gt; and &lt;a href="https://help.github.com/articles/creating-project-pages-manually#lets-get-crackin"&gt;creating project pages manually&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is, we're doing &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout --orphan master&lt;/code&gt;. You can confirm that you're in a parentless tree with &lt;code&gt;git log&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;and clear out &lt;em&gt;everything&lt;/em&gt; with &lt;code&gt;git rm -rf .&lt;/code&gt; and &lt;code&gt;git clean&lt;/code&gt; the remainder, or manually &lt;code&gt;rm&lt;/code&gt; anything else . Double-check what you did with &lt;code&gt;git status&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now move the contents of your &lt;code&gt;output&lt;/code&gt; folder into the folder, then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m 'output' -m 'pelican output to master branch'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See what's up with your beautiful &lt;a href="https://github.com/acm-sfsu/acm-sfsu.github.io/network"&gt;network&lt;/a&gt; graph.&lt;/p&gt;
&lt;p&gt;Aside: You &lt;a href="https://github.com/blog/1706-descriptive-error-messages-for-failed-github-pages-builds"&gt;get emailed if the build fails&lt;/a&gt; when using Jekyll, but not when using Pelican or building otherwise. If you want to confirm, check in your admin settings whether it was built.&lt;/p&gt;
&lt;p&gt;Hope to see you at an upcoming &lt;a href="/calendar"&gt;event&lt;/a&gt;, feel free to stop by in our IRC &lt;a href="http://webchat.freenode.net/?channels=acm-sfsu"&gt;#acm-sfsu&lt;/a&gt; if you have any questions,&lt;/p&gt;
&lt;p&gt;Cheers,
Tom&lt;/p&gt;</summary><category term="blogging about blogs"></category><category term="pelican"></category><category term="publishing"></category><category term="happy"></category><category term="templates"></category><category term="github pages"></category></entry></feed>